package ${package.Entity};
<% for(pkg in table.importPackages){ %>
import ${pkg};
<% } %>
<% if(swagger){ %>
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
<% } %>
import com.kt.component.common.enums.BasicEnums;
import com.kt.component.common.enums.EnumUtils;
<% if(entityLombokModel){ %>
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.AllArgsConstructor;
import lombok.Getter;
<% if(chainModel){ %>
import lombok.experimental.Accessors;
<% } %>
<% } %>
/**
 * <p>
 * ${table.comment!}
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
<% if(entityLombokModel){ %>
@Data
    <% if(isNotEmpty(superEntityClass)){ %>
@EqualsAndHashCode(callSuper = true)
    <% }else{ %>
@EqualsAndHashCode(callSuper = false)
    <% } %>
    <% if(chainModel){ %>
@Accessors(chain = true)
    <% } %>
<% } %>
@TableName("${table.name}")
<% if(swagger){ %>
@ApiModel(value="${entity}对象", description="${table.comment!''}")
<% } %>
<% if(isNotEmpty(superEntityClass)){ %>
public class ${entity} extends ${superEntityClass}<% if(activeRecord){ %><${entity}><%}%> {
<% }else if(activeRecord){ %>
public class ${entity} extends Model<${entity}> {
<% }else{ %>
public class ${entity} implements Serializable {
<% } %>

<% /** -----------BEGIN 字段循环遍历----------- **/ %>
<% for(field in table.fields){ %>
    <%
    if(field.keyFlag){
        var keyPropertyName = field.propertyName;
    }
    %>

    <% if(isNotEmpty(field.comment)){ %>
        <% if(swagger){ %>
    @ApiModelProperty(value = "${field.comment}")
        <% }else{ %>
    /**
     * ${field.comment}
     */
        <% } %>
    <% } %>
    <% if(field.keyFlag){ %>
    <%
    /*主键*/
    %>
        <% if(field.keyIdentityFlag){ %>
    @TableId(value = "${field.annotationColumnName}", type = IdType.AUTO)
        <% }else if(isNotEmpty(idType)){ %>
    @TableId(value = "${field.annotationColumnName}", type = IdType.${idType})
        <% }else if(field.convert){ %>
    @TableId("${field.annotationColumnName}")
         <% } %>
    <%
    /*普通字段*/
    %>
    <% }else if(isNotEmpty(field.fill)){ %>
        <% if(field.convert){ %>
    @TableField(value = "${field.annotationColumnName}", fill = FieldFill.${field.fill})
        <% }else{ %>
    @TableField(fill = FieldFill.${field.fill})
        <% } %>
    <% }else { %>
    @TableField("${field.annotationColumnName}")
    <% } %>
    <%
    /*乐观锁注解*/
    %>
    <% if(versionFieldName!'' == field.name){ %>
    @Version
    <% } %>
    <%
    /*逻辑删除注解*/
    %>
    <% if(logicDeleteFieldName!'' == field.name){ %>
    @TableLogic
    <% } %>
    private ${field.propertyType} ${field.propertyName};
<% } %>
<% /** -----------END 字段循环遍历----------- **/ %>

<% if(!entityLombokModel){ %>
    <% for(field in table.fields){ %>
        <%
        var getprefix ='';
        if(field.propertyType=='boolean'){
            getprefix='is';
        }else{
            getprefix='get';
        }
        %>
    public ${field.propertyType} ${getprefix}${field.capitalName}() {
        return ${field.propertyName};
    }

        <% if(chainModel){ %>
    public ${entity} set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
        <% }else{ %>
    public void set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
        <% } %>
        this.${field.propertyName} = ${field.propertyName};
        <% if(chainModel){ %>
        return this;
        <% } %>
    }

    <% } %>
<% } %>
<% if(entityColumnConstant){ %>
   <% for(field in table.fields){ %>
    public static final String ${strutil.toUpperCase(field.name)} = "${field.name}";

   <% } %>
<% } %>
<% if(activeRecord){ %>
    @Override
    protected Serializable pkVal() {
    <% if(isNotEmpty(keyPropertyName)){ %>
        return this.${keyPropertyName};
    <% }else{ %>
        return null;
    <% } %>
    }

<% } %>
<% if(!entityLombokModel){ %>
    @Override
    public String toString() {
        return "${entity}{" +
    <% for(field in table.fields){ %>
       <% if(fieldLP.index==0){ %>
        "${field.propertyName}=" + ${field.propertyName} +
       <% }else{ %>
        ", ${field.propertyName}=" + ${field.propertyName} +
       <% } %>
    <% } %>
        "}";
    }
<% } %>
<% for(field in table.fields){ %>
    <% if(strutil.contain(field.comment,"enums")){ %>
        <% var start = strutil.index(field.comment,"[") + 1; var end = strutil.index(field.comment,"]"); var content = strutil.subStringTo(field.comment, start, end);
            var arr = strutil.split(content, ";");
             var enumClassName = strutil.toUpperCase(strutil.subStringTo(field.propertyName, 0, 1)) + strutil.subString(field.propertyName, 1);
             %>
    @Getter
    @AllArgsConstructor
    public enum ${strutil.toUpperCase(strutil.subStringTo(field.propertyName, 0, 1))}${strutil.subString(field.propertyName, 1)} implements BasicEnums {
    <% for(user in arr) {
    var arr2 = strutil.split(user, ",");
    var enumName = arr2[0];
    var text = arr2[1];
    var value = arr2[2];
    %>
        ${enumName}(${value}, "${text}"),
    <% } %>;
        private final Integer value;
        private final String text;

        public static ${enumClassName} getByValue(Integer value) {
            return EnumUtils.getByValue(values(), value);
        }

        public static String getText(Integer value) {
            return EnumUtils.getTextByValue(values(), value);
        }
    }
    <% } %>
 <% } %>
}
